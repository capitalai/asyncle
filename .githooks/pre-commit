#!/usr/bin/env bash
#
# Pre-commit hook for asyncle project
# Checks code formatting before allowing commit
#
# To install: ln -sf ../../.githooks/pre-commit .git/hooks/pre-commit
# Or run: git config core.hooksPath .githooks

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "Running pre-commit checks..."

# Check if clang-format-18 is available
if ! command -v clang-format-18 &> /dev/null; then
    echo -e "${YELLOW}Warning: clang-format-18 not found, skipping format check${NC}"
    echo "Install with: sudo apt-get install clang-format-18 (Ubuntu/Debian)"
    echo "           or: brew install clang-format (macOS)"
    exit 0
fi

# Get list of staged C++ files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|hpp|h|cc)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✓ No C++ files to check${NC}"
    exit 0
fi

echo "Checking code formatting..."

# Check formatting
FORMAT_ERRORS=""
for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        # Run clang-format in dry-run mode
        if ! clang-format-18 --dry-run --Werror "$FILE" 2>&1 > /dev/null; then
            FORMAT_ERRORS="$FORMAT_ERRORS\n  - $FILE"
        fi
    fi
done

# If there are formatting errors, abort commit
if [ -n "$FORMAT_ERRORS" ]; then
    echo -e "${RED}✗ Code formatting issues found in:${NC}"
    echo -e "$FORMAT_ERRORS"
    echo ""
    echo -e "${YELLOW}Fix with:${NC}"
    echo "  clang-format-18 -i <file>"
    echo "Or auto-fix all staged files:"
    echo "  git diff --cached --name-only --diff-filter=ACM | grep -E '\\.(cpp|hpp|h|cc)\$' | xargs clang-format-18 -i"
    echo ""
    echo "Then stage the changes:"
    echo "  git add <files>"
    exit 1
fi

echo -e "${GREEN}✓ Code formatting check passed${NC}"

# Optional: Run basic compile check if CMake build exists
if [ -d "build" ] && [ -f "build/Makefile" ]; then
    echo "Running quick build check..."
    if ! cmake --build build --target platform_process platform_file platform_mmap 2>&1 | tail -5; then
        echo -e "${RED}✗ Build check failed${NC}"
        echo "Fix build errors before committing"
        exit 1
    fi
    echo -e "${GREEN}✓ Build check passed${NC}"
fi

echo -e "${GREEN}✓ All pre-commit checks passed${NC}"
exit 0
