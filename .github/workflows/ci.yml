name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler:
          - { name: "GCC", cc: "gcc", cxx: "g++" }
          - { name: "Clang", cc: "clang", cxx: "clang++" }
        exclude:
          # Windows doesn't have GCC/Clang by default in runner
          - os: windows-latest
            compiler: { name: "GCC", cc: "gcc", cxx: "g++" }
          - os: windows-latest
            compiler: { name: "Clang", cc: "clang", cxx: "clang++" }
        include:
          # Add MSVC for Windows
          - os: windows-latest
            compiler: { name: "MSVC", cc: "cl", cxx: "cl" }
          # Use latest GCC version for macOS
          - os: macos-latest
            compiler: { name: "GCC", cc: "gcc-14", cxx: "g++-14" }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        if [ "${{ matrix.compiler.name }}" = "Clang" ]; then
          # Install newer clang for C++23 support  
          sudo apt-get install -y clang-18
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        else
          # Ensure we have newer GCC for better C++23 support
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        fi

    - name: Setup C++ environment (macOS)
      if: runner.os == 'macOS'
      run: |
        # Remove any existing cmake installations that might conflict
        brew uninstall --ignore-dependencies cmake || true
        brew install cmake
        if [ "${{ matrix.compiler.name }}" = "GCC" ]; then
          # Install latest GCC for better C++23 support
          brew install gcc@14 || brew install gcc@13
        else
          # Ensure we have recent Xcode tools for Clang C++23 support
          sudo xcode-select --install || true
          # Check Clang version
          clang++ --version
        fi

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Create build directory
      run: cmake -E make_directory build

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: |
        echo "Configuring with compiler: ${{ matrix.compiler.name }}"
        echo "CC: ${{ matrix.compiler.cc }}, CXX: ${{ matrix.compiler.cxx }}"
        # Check compiler versions before configuring
        ${{ matrix.compiler.cc }} --version || echo "CC version check failed"
        ${{ matrix.compiler.cxx }} --version || echo "CXX version check failed"
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
          -DASYNCLE_BUILD_TESTS=ON

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      working-directory: build
      run: |
        echo "Configuring for Windows with MSVC"
        cmake .. -DASYNCLE_BUILD_TESTS=ON

    - name: Build
      working-directory: build
      run: |
        echo "Building project..."
        cmake --build . --config Release

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: |
        # List available tests first for debugging
        ctest --show-only || true
        # Run tests with detailed output
        ctest --output-on-failure --verbose

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      working-directory: build
      run: |
        # List available tests first for debugging
        ctest --show-only -C Release
        # Run tests with detailed output
        ctest --output-on-failure --verbose -C Release

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        # Install specific clang-format version for consistency
        sudo apt-get install -y clang-format-18 clang-tidy
        # Install newer clang for C++23 support
        sudo apt-get install -y clang-18
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100

    - name: Check code formatting
      run: |
        # Use specific clang-format version for consistency
        find include tests -name "*.hpp" -o -name "*.cpp" | xargs clang-format-18 --dry-run --Werror

    - name: Static analysis with clang-tidy
      run: |
        echo "Skipping clang-tidy for now due to C++23 compatibility issues"
        # TODO: Configure clang-tidy properly for C++23
        # cmake -B build -DASYNCLE_BUILD_TESTS=ON
        # cmake --build build  
        # find include -name "*.hpp" | xargs clang-tidy -p build --warnings-as-errors="*"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake lcov
        # Install newer GCC for better C++23 support
        sudo apt-get install -y gcc-13 g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

    - name: Configure with coverage
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DASYNCLE_BUILD_TESTS=ON

    - name: Build
      run: cmake --build build

    - name: Run tests
      working-directory: build  
      run: |
        # List available tests first for debugging
        ctest --show-only || true
        # Run tests with detailed output
        ctest --output-on-failure --verbose

    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.info
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}